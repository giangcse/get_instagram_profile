import logging
import re
import os
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# ======================= C·∫§U H√åNH =======================
# L·∫•y th√¥ng tin c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ t·∫£i
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME")
WORKSHEET_NAME = os.getenv("WORKSHEET_NAME")
GOOGLE_CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_FILE")
RATING_COLUMN_NAME = os.getenv("RATING_COLUMN_NAME", "Rating")

# B·∫≠t logging ƒë·ªÉ d·ªÖ d√†ng theo d√µi v√† s·ª≠a l·ªói
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng quan tr·ªçng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ch∆∞a
if not all([TELEGRAM_TOKEN, GOOGLE_SHEET_NAME, WORKSHEET_NAME, GOOGLE_CREDENTIALS_FILE]):
    logger.critical(
        "L·ªói: M·ªôt ho·∫∑c nhi·ªÅu bi·∫øn m√¥i tr∆∞·ªùng (TELEGRAM_TOKEN, GOOGLE_SHEET_NAME, WORKSHEET_NAME, GOOGLE_CREDENTIALS_FILE) "
        "ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong file .env. Vui l√≤ng ki·ªÉm tra l·∫°i."
    )
    exit()

# ======================= KH·ªûI T·∫†O K·∫æT N·ªêI GOOGLE SHEET =======================
# T·ªêI ∆ØU: Kh·ªüi t·∫°o k·∫øt n·ªëi m·ªôt l·∫ßn duy nh·∫•t khi bot kh·ªüi ƒë·ªông ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô ph·∫£n h·ªìi.
worksheet = None
try:
    logger.info("ƒêang k·∫øt n·ªëi t·ªõi Google Sheets...")
    scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_file(GOOGLE_CREDENTIALS_FILE, scopes=scopes)
    client = gspread.authorize(creds)
    spreadsheet = client.open(GOOGLE_SHEET_NAME)
    worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
    logger.info("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng!")
except Exception as e:
    logger.critical(f"L·ªñI NGHI√äM TR·ªåNG: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Google Sheets khi kh·ªüi ƒë·ªông. L·ªói: {e}")
    # Bi·∫øn worksheet s·∫Ω l√† None, c√°c l·ªánh sau s·∫Ω ki·ªÉm tra v√† b√°o l·ªói cho ng∆∞·ªùi d√πng.

# ƒê·ªãnh nghƒ©a c√°c tr·∫°ng th√°i cho cu·ªôc h·ªôi tho·∫°i
ASKING_RATING = range(1)

# ======================= C√ÅC H√ÄM C·ª¶A BOT =======================

def extract_username(url: str) -> str | None:
    """Tr√≠ch xu·∫•t username t·ª´ URL Instagram b·∫±ng regex ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu ƒë·ªãnh d·∫°ng URL."""
    if not url:
        return None
    match = re.search(r"(?:https?://)?(?:www\.)?instagram\.com/([A-Za-z0-9_](?:(?:[A-Za-z0-9_]|\.(?!\.))*[A-Za-z0-9_]){0,29})", url)
    if match:
        return match.group(1)
    return None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G·ª≠i tin nh·∫Øn ch√†o m·ª´ng khi ng∆∞·ªùi d√πng g√µ /start."""
    await update.message.reply_text(
        "Xin ch√†o! T√¥i l√† bot gi√∫p b·∫°n th√™m h·ªì s∆° Instagram v√†o Google Sheet.\n\n"
        "G·ª≠i l·ªánh `/add <URL_INSTAGRAM>` ƒë·ªÉ b·∫Øt ƒë·∫ßu."
    )

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """B·∫Øt ƒë·∫ßu qu√° tr√¨nh th√™m URL, ki·ªÉm tra tr√πng l·∫∑p v√† h·ªèi x·∫øp h·∫°ng."""
    # T·ªêI ∆ØU: Ki·ªÉm tra xem k·∫øt n·ªëi Google Sheet c√≥ s·∫µn s√†ng kh√¥ng.
    if worksheet is None:
        await update.message.reply_text("L·ªói nghi√™m tr·ªçng: Bot kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Google Sheet. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh v√† kh·ªüi ƒë·ªông l·∫°i bot.")
        return ConversationHandler.END

    if not context.args:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p URL. V√≠ d·ª•: /add https://www.instagram.com/google")
        return ConversationHandler.END

    profile_url = context.args[0]
    new_username = extract_username(profile_url)

    if not new_username:
        await update.message.reply_text("URL Instagram kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return ConversationHandler.END
    
    try:
        # T·ªêI ∆ØU: S·ª≠ d·ª•ng l·∫°i k·∫øt n·ªëi `worksheet` ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o to√†n c·ª•c.
        existing_urls = worksheet.col_values(2)[1:]
        
        for existing_url in existing_urls:
            existing_username = extract_username(existing_url)
            if existing_username and existing_username.lower() == new_username.lower():
                await update.message.reply_text(
                    f"‚ö†Ô∏è Profile v·ªõi username <code>{new_username}</code> ƒë√£ t·ªìn t·∫°i trong sheet.",
                    parse_mode=ParseMode.HTML
                )
                return ConversationHandler.END

        worksheet.append_row(["", profile_url])
        new_row_index = len(worksheet.get_all_values())
        context.user_data['row_to_update'] = new_row_index
        logger.info(f"ƒê√£ th√™m URL '{profile_url}' v√†o h√†ng {new_row_index}.")

        keyboard = [[InlineKeyboardButton(f"‚≠êÔ∏è {i}", callback_data=str(i)) for i in range(1, 6)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("‚úÖ ƒê√£ th√™m URL v√†o sheet. Vui l√≤ng ch·ªçn x·∫øp h·∫°ng (rating):", reply_markup=reply_markup)
        
        return ASKING_RATING

    except Exception as e:
        logger.error(f"L·ªói khi th·ª±c hi·ªán l·ªánh /add: {e}")
        await update.message.reply_text("ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return ConversationHandler.END

async def rating_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t x·∫øp h·∫°ng."""
    # T·ªêI ∆ØU: Ki·ªÉm tra xem k·∫øt n·ªëi Google Sheet c√≥ s·∫µn s√†ng kh√¥ng.
    if worksheet is None:
        await update.message.reply_text("L·ªói nghi√™m tr·ªçng: Bot kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Google Sheet. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh v√† kh·ªüi ƒë·ªông l·∫°i bot.")
        return ConversationHandler.END
        
    query = update.callback_query
    await query.answer()

    rating_value = query.data
    row_index = context.user_data.get('row_to_update')

    if not row_index:
        await query.edit_message_text(text="C√≥ l·ªói x·∫£y ra, kh√¥ng t√¨m th·∫•y h√†ng c·∫ßn c·∫≠p nh·∫≠t. Vui l√≤ng th·ª≠ l·∫°i v·ªõi l·ªánh /add.")
        return ConversationHandler.END

    try:
        # T·ªêI ∆ØU: S·ª≠ d·ª•ng l·∫°i k·∫øt n·ªëi `worksheet` ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o to√†n c·ª•c.
        headers = worksheet.row_values(1)
        try:
            rating_col_index = headers.index(RATING_COLUMN_NAME) + 1
        except ValueError:
             await query.edit_message_text(text=f"L·ªói: Kh√¥ng t√¨m th·∫•y c·ªôt '{RATING_COLUMN_NAME}' trong Google Sheet c·ªßa b·∫°n.")
             return ConversationHandler.END

        worksheet.update_cell(row_index, rating_col_index, rating_value)
        logger.info(f"ƒê√£ c·∫≠p nh·∫≠t x·∫øp h·∫°ng '{rating_value}' cho h√†ng {row_index}.")
        await query.edit_message_text(text=f"üëç ƒê√£ l∆∞u x·∫øp h·∫°ng: {rating_value} sao!")

    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t rating: {e}")
        await query.edit_message_text(text="C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i.")
        
    if 'row_to_update' in context.user_data:
        del context.user_data['row_to_update']
        
    return ConversationHandler.END

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """H·ªßy b·ªè cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i."""
    await update.message.reply_text("ƒê√£ h·ªßy thao t√°c.")
    if 'row_to_update' in context.user_data:
        del context.user_data['row_to_update']
    return ConversationHandler.END

def main() -> None:
    """Kh·ªüi ch·∫°y v√† v·∫≠n h√†nh bot."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", add_command)],
        states={
            ASKING_RATING: [CallbackQueryHandler(rating_callback)],
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
    )

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(conv_handler)

    print("üöÄ Bot ƒëang ch·∫°y... Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.")
    application.run_polling()

if __name__ == "__main__":
    main()
